# {{PROBLEM}} Class Design Recipe

## 1. Describe the Problem

As a user
So that I can keep track of my tasks
I want a program that I can add todo tasks to and see a list of them.

As a user
So that I can focus on tasks to complete
I want to mark tasks as complete and have them disappear from the list.

## 2. Design the Class Interface

_Include the initializer and public methods with all parameters and return values._

```ruby
# EXAMPLE

class TodoTracker
  def initialize 
    # ...
  end

  def add_todo(task) # task is a string
    # No return value
  end

  def list 
    # Returns a list of strings with each task

  def complete(task)
    # Marks a task as complete and removes from the list
  end
end
```

## 3. Create Examples as Tests

_Make a list of examples of how the class will behave in different situations._

```ruby

# 1
todo_tracker = TodoTracker.new
todo_tracker.list # => []


# 2
todo_tracker = TodoTracker.new
todo_tracker.add_todo("write in journal") 
todo_tracker.list # => ["write in journal"]

# 3
todo_tracker = TodoTracker.new
todo_tracker.add_todo("write in journal") 
todo_tracker.add_todo("go food shopping") 
todo_tracker.list # => ["write in journal", "go food shopping"]

# 4
todo_tracker = TodoTracker.new
todo_tracker.add_todo("write in journal") 
todo_tracker.complete("write in journal")
todo_tracker.list # => []

# 5
todo_tracker = TodoTracker.new
todo_tracker.add_todo("write in journal") 
todo_tracker.add_todo("go food shopping") 
todo_tracker.list # => ["write in journal", "go food shopping"]
todo_tracker.complete("write in journal")
todo_tracker.list # => ["go food shopping"]

# 6
todo_tracker = TodoTracker.new
todo_tracker.add_todo("go food shopping") 
todo_tracker.list # => ["go food shopping"]
todo_tracker.complete("write in journal") # => fails
```

_Encode each example as a test. You can add to the above list as you go._

## 4. Implement the Behaviour

_After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour._
